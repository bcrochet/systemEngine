apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

allprojects {
	sourceCompatibility = 1.6
	targetCompatibility = 1.6

	compileGroovy.groovyOptions.fork = false
	compileTestGroovy.groovyOptions.fork = false
}

configurations {
	testng
}

eclipse {
	classpath {
		defaultOutputDir = file('build')	
	}
}

repositories {
    mavenCentral()
    [
        'https://repository.jboss.org/nexus/content/repositories/thirdparty-uploads',
		'http://clojars.org/repo',
		'http://download.java.net/maven/2/',
		'http://repository.codehaus.org',
		'http://snapshots.repository.codehaus.org'
    ].each { repo ->  
        maven {
            url repo
        }
    }
}

dependencies {
	def testngVersion = '6.5.1'
	def seleniumVersion = '2.21.0'
	
	testCompile "org.testng:testng:${testngVersion}",
		'org.uncommons:reportng:1.1.3',
		'xmlunit:xmlunit:1.3'
	testRuntime 'org.slf4j:slf4j-jdk14:1.6.4',
                    'com.google.inject:guice:2.0'
	compile "org.testng:testng:${testngVersion}",
		'com.google.code.typica:typica:1.7.2',
		"org.seleniumhq.selenium:selenium-java:${seleniumVersion}",
		'org.apache.httpcomponents:httpclient:[4.1.2,5.0)',
		'xmlunit:xmlunit:1.3',
		'webui-framework:webui-framework:1.0.2-SNAPSHOT',
		'org.codehaus.groovy.modules.http-builder:http-builder:[0.5.2,1.0)',
      	'com.trilead:trilead-ssh2:build213-svnkit-1.3-patch',
		'org.apache.xmlrpc:xmlrpc-common:3.1.3',
		'com.google.collections:google-collections:1.0',
		'org.apache.ivy:ivy:2.2.0',
		'oauth.signpost:signpost-core:[1.2,2.0)'
	groovy 'org.codehaus.groovy:groovy:1.8.6'
	testng "org.testng:testng:${testngVersion}"	
}

task printClasspath << {
    println configurations.runtime.asPath
}

test {
	useTestNG()
	systemProperties = System.properties
	if ( systemProperties['testng.suites'] ) {
	    options.suites(systemProperties['testng.suites'])
        }
	options {
//	    listeners << 'com.redhat.qe.auto.bugzilla.BugzillaTestNGListener'
	    listeners << 'org.uncommons.reportng.HTMLReporter'
	    listeners << 'org.uncommons.reportng.JUnitXMLReporter'
	    listeners << 'com.redhat.qe.auto.testng.TestNGListener'
        }
	scanForTestClasses = false
        if ( systemProperties['ignore.failures'] ) {
	    ignoreFailures = systemProperties['ignore.failures']
        }
	testLogging.showStandardStreams = true
}

task printProps << {
	println System.properties
}

tasks.addRule("Pattern: suite<SuiteName>: Runs a test suite via xml in classpath") { String taskName ->
	final String prefix = "suite"
	if ( taskName.startsWith(prefix) && taskName.length() > prefix.length() ) {
		logger.info("SuiteExecution: $taskName matches pattern")

		// create a dummy task for the task name specified on the command line
		Task dummyTask = task(taskName)

		// remove prefix from the specified task name	
		def suiteName = taskName - prefix

		// define an include that supports the specified naming pattern, inc. camel-case notation
		def camelCaseTaskName = suiteName[0] + suiteName.substring(1).collect() { it == it.toUpperCase() ? "*$it" : it }.join("")
		def suiteIncludes = WrapUtil.toSet(String.format("**/%s.xml", camelCaseTaskName))
		def suiteFiles = fileTree(dir: 'src', includes: suiteIncludes )
		suiteFiles.each { File file ->
			logger.info("SuiteExecution: suiteFile: ${file}")
		}

		// make all Test tasks a dependency of the dummy task and reset the includes
		tasks.withType(Test) { Task suiteTask ->
			logger.info("SuiteExecution: apply include pattern to Suite task <$suiteTask.name>")
			suiteTask.useTestNG()
			suiteTask.options.suites(suiteFiles.asType(File[]))
			dummyTask.dependsOn suiteTask
		}
	}
}

task runTestng(dependsOn: 'testClasses') << {
	// Defaults to $WORKSPACE, or if that's null, cwd
	def workspace = System.getProperty("workspace.dir", System.getenv("WORKSPACE") ?: System.properties["user.dir"])
	def testngProjectDir = System.getProperty("testng.project.dir", "automatjon/jon")
	def automationDir = "${workspace}/${testngProjectDir}"
	System.properties["automation.dir"] = automationDir.toString()
	def outputDir = System.getProperty("testng.outputdir", "${automationDir}/test-output")
	def xmlSuite = System.properties["testng.suites"]
	ant.taskdef( resource: 'testngtasks', classpath: configurations.testng.asPath )
	ant.testng( classpath: sourceSets.test.runtimeClasspath.asPath, outputdir: outputDir) {
		xmlfileset(dir: 'src', includes: "**/${xmlSuite}")
	}

}

task startConsole(dependsOn: 'classes', type: JavaExec) {
    main = 'groovy.ui.Console'
    classpath = configurations.groovy + sourceSets.main.runtimeClasspath
    systemProperties = System.properties
}

jar {
}

task writeNewPom << {
	pom.writeTo("$buildDir/newpom.xml") 
}
